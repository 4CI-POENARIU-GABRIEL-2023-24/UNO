package view;

import controller.Controller;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import java.util.ArrayList;
import javax.swing.SwingConstants;

/**
 *
 * @author Gabriel
 */
public class FinestraGioco extends javax.swing.JFrame {
    
    private Controller controller;
    private boolean modNascondi;
    private int paginaScorrimento;
    
    private ArrayList<JButton> pulsantiCarte;
    
    /**
     * Creates new form FinestraGioco
     * @param controller
     */
    
    public FinestraGioco(Controller controller) {
        initComponents();
        
        this.controller = controller;
        modNascondi = true;
        paginaScorrimento = 0;
                
        pulsantePesca.setVisible(false);
        pulsanteScorriSinistra.setVisible(false);
        pulsanteScorriDestra.setVisible(false);
        etichettaTurno.setHorizontalAlignment(SwingConstants.CENTER);
        
        pulsantiCarte = new ArrayList<>();
        pulsantiCarte.add(jButton1);
        pulsantiCarte.add(jButton2);
        pulsantiCarte.add(jButton3);
        pulsantiCarte.add(jButton4);
        pulsantiCarte.add(jButton5);
        pulsantiCarte.add(jButton6);
        pulsantiCarte.add(jButton7);
        pulsantiCarte.add(jButton8);
        pulsantiCarte.add(jButton9);
        pulsantiCarte.add(jButton10);

        for (int i = 0; i < 10; i++)
        {
            pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/Default.png")));
        }
        pulsanteCartaScarto.setIcon(new ImageIcon(getClass().getResource("/immagini/" + controller.getCartaScarto() + ".png")));
        etichettaTurno.setText("Turno di " + controller.getGiocatori().get(0) + "!");
    }
    
    public void prossimoTurno()
    {
        modNascondi = true;
        paginaScorrimento = 0;
        
        pulsantePesca.setVisible(false);
        etichettaTurno.setHorizontalAlignment(SwingConstants.CENTER);
        pulsantePronto.setVisible(true);
        pulsanteScorriSinistra.setVisible(false);
        pulsanteScorriDestra.setVisible(false);
                
        pulsanteCartaScarto.setIcon(new ImageIcon(getClass().getResource("/immagini/" + controller.getCartaScarto() + ".png")));
        etichettaTurno.setText("Turno di " + controller.getGiocatori().get(controller.getTurno()) + "!");
        for (int i = 0; i < 10; i++)
        {
            pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/Default.png")));
        }
        if (controller.getNumCarteDaPescare() == 0) etichettaColoreJolly.setText(controller.getColoreJolly());
        else etichettaColoreJolly.setText(controller.getColoreJolly() + " (devi pescare!)");
    }
    
    public void pescaCarta(String cartaPescata)
    {
        modNascondi = true;
        int posizione = controller.getMazziGiocatori().get(controller.getTurno()).size()-1;
        
        if (controller.sonoCompatibili(cartaPescata, controller.getCartaScarto()))
        {
            new CartaPescata(this, cartaPescata, true, posizione).setVisible(true);
        }
        else new CartaPescata(this, cartaPescata, false, posizione).setVisible(true);
    }
    
    public void scartaCartaPescata(int posizione)
    {
        if (controller.scartaCarta(posizione))
        {
            modNascondi = true;
            pulsantePesca.setVisible(false);
            etichettaTurno.setHorizontalAlignment(SwingConstants.CENTER);
            pulsantePronto.setVisible(true);
                
            pulsanteCartaScarto.setIcon(new ImageIcon(getClass().getResource("/immagini/" + controller.getCartaScarto() + ".png")));
            etichettaTurno.setText("Turno di " + controller.getGiocatori().get(controller.getTurno()) + "!");
            for (int i = 0; i < 10; i++)
            {
                pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/Default.png")));
            }
            if (controller.getNumCarteDaPescare() == 0) etichettaColoreJolly.setText(controller.getColoreJolly());
            else etichettaColoreJolly.setText(controller.getColoreJolly() + " (devi pescare!)");
        } else this.dispose();
    }
    
    public void stopPesca()
    {
        controller.prossimoTurno();
        prossimoTurno();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sfondo1 = new view.Sfondo1();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        pulsanteCartaScarto = new javax.swing.JButton();
        etichettaColoreJolly = new javax.swing.JLabel();
        pulsantePronto = new javax.swing.JButton();
        pulsantePesca = new javax.swing.JButton();
        pulsanteEsci = new javax.swing.JButton();
        etichettaTurno = new javax.swing.JLabel();
        pulsanteScorriDestra = new javax.swing.JButton();
        pulsanteScorriSinistra = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jButton1.setPreferredSize(new java.awt.Dimension(130, 182));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        etichettaColoreJolly.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N

        pulsantePronto.setBackground(new java.awt.Color(247, 227, 89));
        pulsantePronto.setFont(new java.awt.Font("Arial", 1, 70)); // NOI18N
        pulsantePronto.setText("Pronto!");
        pulsantePronto.setActionCommand("");
        pulsantePronto.setBorderPainted(false);
        pulsantePronto.setFocusPainted(false);
        pulsantePronto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteProntoActionPerformed(evt);
            }
        });

        pulsantePesca.setBackground(new java.awt.Color(247, 227, 89));
        pulsantePesca.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        pulsantePesca.setText("Pesca carta");
        pulsantePesca.setActionCommand("");
        pulsantePesca.setBorderPainted(false);
        pulsantePesca.setFocusPainted(false);
        pulsantePesca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsantePescaActionPerformed(evt);
            }
        });

        pulsanteEsci.setBackground(new java.awt.Color(247, 227, 89));
        pulsanteEsci.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        pulsanteEsci.setText("Esci");
        pulsanteEsci.setActionCommand("");
        pulsanteEsci.setBorderPainted(false);
        pulsanteEsci.setFocusPainted(false);
        pulsanteEsci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteEsciActionPerformed(evt);
            }
        });

        etichettaTurno.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        etichettaTurno.setText("Turno di:");

        pulsanteScorriDestra.setBackground(new java.awt.Color(247, 227, 89));
        pulsanteScorriDestra.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        pulsanteScorriDestra.setText(">>");
        pulsanteScorriDestra.setActionCommand("");
        pulsanteScorriDestra.setBorderPainted(false);
        pulsanteScorriDestra.setFocusPainted(false);
        pulsanteScorriDestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteScorriDestraActionPerformed(evt);
            }
        });

        pulsanteScorriSinistra.setBackground(new java.awt.Color(247, 227, 89));
        pulsanteScorriSinistra.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        pulsanteScorriSinistra.setText("<<");
        pulsanteScorriSinistra.setActionCommand("");
        pulsanteScorriSinistra.setBorderPainted(false);
        pulsanteScorriSinistra.setFocusPainted(false);
        pulsanteScorriSinistra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsanteScorriSinistraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sfondo1Layout = new javax.swing.GroupLayout(sfondo1);
        sfondo1.setLayout(sfondo1Layout);
        sfondo1Layout.setHorizontalGroup(
            sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sfondo1Layout.createSequentialGroup()
                .addGroup(sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sfondo1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(pulsanteCartaScarto, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(etichettaColoreJolly)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sfondo1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sfondo1Layout.createSequentialGroup()
                                .addComponent(pulsanteScorriSinistra)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pulsanteScorriDestra))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sfondo1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(pulsantePronto)
                                .addGap(409, 409, 409)
                                .addComponent(pulsanteEsci))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sfondo1Layout.createSequentialGroup()
                                .addComponent(etichettaTurno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(pulsantePesca))
                            .addGroup(sfondo1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        sfondo1Layout.setVerticalGroup(
            sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sfondo1Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pulsanteCartaScarto, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etichettaColoreJolly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pulsantePronto)
                    .addComponent(pulsanteEsci))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pulsantePesca)
                    .addComponent(etichettaTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pulsanteScorriDestra)
                    .addComponent(pulsanteScorriSinistra))
                .addGap(13, 13, 13)
                .addGroup(sfondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sfondo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sfondo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void pulsanteProntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulsanteProntoActionPerformed
        if (!controller.getCartaScarto().split("_")[0].equals("Jolly") || !controller.getColoreJolly().equals(""))
        {
            pulsantePronto.setVisible(false);
            pulsantePesca.setVisible(true);
            modNascondi = false;
            
            if (controller.getNumCarteDaPescare() == 0) etichettaColoreJolly.setText(controller.getColoreJolly());
            else etichettaColoreJolly.setText(controller.getColoreJolly() + " (devi pescare!)");
            
            etichettaTurno.setHorizontalAlignment(SwingConstants.LEFT);
            
            if (controller.getMazziGiocatori().get(controller.getTurno()).size() <= 10)
                for (int i = 0; i < controller.getMazziGiocatori().get(controller.getTurno()).size(); i++)
                {
                    pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/" + controller.getMazziGiocatori().get(controller.getTurno()).get(i) + ".png")));
                }
            else
            {
                pulsanteScorriSinistra.setVisible(true);
                pulsanteScorriDestra.setVisible(true);
                for (int i = 0; i < 10; i++)
                {
                    pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/" + controller.getMazziGiocatori().get(controller.getTurno()).get(i) + ".png")));
                }
            }
        }
        else new Errore("colore non inserito").setVisible(true);
    }//GEN-LAST:event_pulsanteProntoActionPerformed

    private void pulsantePescaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulsantePescaActionPerformed
        if (controller.getNumCarteDaPescare() == 0)
        {
            String cartaPescata = controller.pescaCarta();
            pescaCarta(cartaPescata);
        } else
        {
            controller.pescaCarte();
            stopPesca();
        }
    }//GEN-LAST:event_pulsantePescaActionPerformed

    private void pulsanteEsciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulsanteEsciActionPerformed
        System.exit(0);
    }//GEN-LAST:event_pulsanteEsciActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (!modNascondi)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10), controller.getCartaScarto()))
            {
                if (!controller.scartaCarta(paginaScorrimento * 10)) this.dispose();
                prossimoTurno();
                
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 1)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 1), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 1);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 2)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 2), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 2);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 3)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 3), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 3);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 4)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 4), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 4);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 5)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 5), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 5);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 6)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 6), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 6);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 7)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 7), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 7);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 8)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 8), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 8);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if (!modNascondi && controller.getMazziGiocatori().get(controller.getTurno()).size() > 9)
        {
            if (controller.sonoCompatibili(controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + 9), controller.getCartaScarto()))
            {
                controller.scartaCarta(paginaScorrimento * 10 + 9);
                prossimoTurno();
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void pulsanteScorriDestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulsanteScorriDestraActionPerformed
        if (controller.getMazziGiocatori().get(controller.getTurno()).size() > 10)
        {
            int pagine;
            if (controller.getMazziGiocatori().get(controller.getTurno()).size() % 10 != 0)
                pagine = (int) controller.getMazziGiocatori().get(controller.getTurno()).size() / 10 + 1;
            else
                pagine = (int) controller.getMazziGiocatori().get(controller.getTurno()).size() / 10;
            if (paginaScorrimento < pagine - 1)
            {
                paginaScorrimento++;
                if (paginaScorrimento != pagine - 1) {
                    for (int i = 0; i < 10; i++)
                    {
                        pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/" + controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + i) + ".png")));
                    }
                } else
                {
                    for (int i = 0; i < controller.getMazziGiocatori().get(controller.getTurno()).size() - paginaScorrimento * 10; i++)
                    {
                        pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/" + controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + i) + ".png")));
                    }
                    for (int i = controller.getMazziGiocatori().get(controller.getTurno()).size() - paginaScorrimento * 10; i < 10; i++)
                    {
                        pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/Default.png")));
                    }
                }
                
            }
        }
    }//GEN-LAST:event_pulsanteScorriDestraActionPerformed

    private void pulsanteScorriSinistraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulsanteScorriSinistraActionPerformed
        if (controller.getMazziGiocatori().get(controller.getTurno()).size() > 10)
        {
            int pagine = (int) controller.getMazziGiocatori().get(controller.getTurno()).size() / 10 + 1;
            if (paginaScorrimento != 0)
            {
                paginaScorrimento--;
                if (paginaScorrimento != pagine - 1) {
                    for (int i = 0; i < 10; i++)
                    {
                        pulsantiCarte.get(i).setIcon(new ImageIcon(getClass().getResource("/immagini/" + controller.getMazziGiocatori().get(controller.getTurno()).get(paginaScorrimento * 10 + i) + ".png")));
                    }
                }
                
            }
        }
    }//GEN-LAST:event_pulsanteScorriSinistraActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel etichettaColoreJolly;
    private javax.swing.JLabel etichettaTurno;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton pulsanteCartaScarto;
    private javax.swing.JButton pulsanteEsci;
    private javax.swing.JButton pulsantePesca;
    private javax.swing.JButton pulsantePronto;
    private javax.swing.JButton pulsanteScorriDestra;
    private javax.swing.JButton pulsanteScorriSinistra;
    private view.Sfondo1 sfondo1;
    // End of variables declaration//GEN-END:variables
}
